import os
import tempfile
import aiofiles
import time
import asyncio
from typing import Optional, List
from fastapi import FastAPI, File, UploadFile, HTTPException, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from dotenv import load_dotenv
from doctomarkdown import DocToMarkdown
import openai

# Load environment variables
load_dotenv()

app = FastAPI(
    title="DocToMarkdown API",
    description="API ƒë·ªÉ chuy·ªÉn ƒë·ªïi t√†i li·ªáu sang Markdown",
    version="1.0.0"
)

# CORS middleware ƒë·ªÉ frontend c√≥ th·ªÉ g·ªçi API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models


class ConversionRequest(BaseModel):
    extract_images: bool = True
    extract_tables: bool = True
    output_type: str = "markdown"  # "markdown" or "text"


class ConversionResponse(BaseModel):
    success: bool
    message: str
    pages: List[dict]
    total_pages: int
    file_type: str


class ErrorResponse(BaseModel):
    success: bool
    message: str
    error: str

# Initialize LLM client


def get_llm_client():
    """Kh·ªüi t·∫°o LLM client d·ª±a tr√™n c·∫•u h√¨nh"""
    api_key = os.getenv("MISTRAL_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è  MISTRAL_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong .env")
        return None

    client = openai.OpenAI(
        api_key=api_key,
        base_url="https://api.mistral.ai/v1/",
        timeout=15.0  # 15 second timeout
    )
    return client


def get_llm_model():
    """L·∫•y t√™n model t·ª´ .env"""
    return os.getenv("MISTRAL_MODEL", "magistral-small-2509")


async def retry_llm_call(func, max_retries=2, base_delay=0.5):
    """Retry logic cho LLM calls v·ªõi exponential backoff"""
    print(f"üîÑ Starting LLM call (max retries: {max_retries})")

    for attempt in range(max_retries):
        try:
            print(f"üìû Attempting LLM call {attempt + 1}/{max_retries}")
            result = await func()
            print(f"‚úÖ LLM call successful on attempt {attempt + 1}")
            return result
        except Exception as e:
            error_str = str(e)
            print(f"‚ùå LLM call failed on attempt {attempt + 1}: {error_str}")

            if "429" in error_str or "rate_limited" in error_str.lower():
                if attempt < max_retries - 1:
                    delay = base_delay * (2 ** attempt)  # Exponential backoff
                    print(
                        f"‚ö†Ô∏è  Rate limit hit, retrying in {delay}s... (attempt {attempt + 1}/{max_retries})")
                    await asyncio.sleep(delay)
                    continue
                else:
                    print(
                        f"‚ùå Rate limit exceeded after {max_retries} attempts")
                    raise HTTPException(
                        status_code=429,
                        detail="API rate limit exceeded. Please try again later."
                    )
            else:
                # Non-rate-limit error, don't retry
                print(f"‚ùå Non-rate-limit error, not retrying: {error_str}")
                raise e

    raise HTTPException(
        status_code=500,
        detail="Failed to process request after multiple attempts"
    )


# Global LLM client v√† model
llm_client = get_llm_client()
llm_model = get_llm_model()


@app.get("/")
async def root():
    return {"message": "DocToMarkdown API ƒëang ho·∫°t ƒë·ªông!"}


@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "llm_available": llm_client is not None,
        "llm_provider": "mistral",
        "llm_model": llm_model if llm_client else None
    }


@app.post("/convert", response_model=ConversionResponse)
async def convert_document(
    file: UploadFile = File(...),
    extract_images: bool = Form(True),
    extract_tables: bool = Form(True),
    output_type: str = Form("markdown")
):
    """
    Chuy·ªÉn ƒë·ªïi t√†i li·ªáu sang Markdown
    H·ªó tr·ª£: PDF, DOCX, PPTX, CSV, Images (PNG, JPG, JPEG)
    """
    print(f"üî• BACKEND: /convert endpoint called!")
    print(f"üìÑ Received file: {file.filename} ({file.size} bytes)")
    print(
        f"‚öôÔ∏è  Options: extract_images={extract_images}, extract_tables={extract_tables}, output_type={output_type}")

    try:
        # Ki·ªÉm tra file type
        file_extension = file.filename.split(
            '.')[-1].lower() if file.filename else ""
        supported_types = ['pdf', 'docx', 'pptx', 'csv', 'png', 'jpg', 'jpeg']

        if file_extension not in supported_types:
            raise HTTPException(
                status_code=400,
                detail=f"Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. H·ªó tr·ª£: {', '.join(supported_types)}"
            )

        # T·∫°o file t·∫°m th·ªùi
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{file_extension}") as temp_file:
            content = await file.read()
            temp_file.write(content)
            temp_file_path = temp_file.name

        try:
            print(f"üîß Initializing DocToMarkdown converter...")
            print(f"ü§ñ LLM available: {llm_client is not None}")

            # Kh·ªüi t·∫°o DocToMarkdown
            app_converter = DocToMarkdown(
                llm_client=llm_client,
                llm_model=llm_model if llm_client else None
            )

            # Ch·ªçn function conversion d·ª±a tr√™n file type
            conversion_function = {
                'pdf': app_converter.convert_pdf_to_markdown,
                'docx': app_converter.convert_docx_to_markdown,
                'pptx': app_converter.convert_pptx_to_markdown,
                'csv': app_converter.convert_csv_to_markdown,
                'png': app_converter.convert_image_to_markdown,
                'jpg': app_converter.convert_image_to_markdown,
                'jpeg': app_converter.convert_image_to_markdown,
            }[file_extension]

            print(f"üöÄ Starting conversion for {file_extension} file...")

            # Th·ª±c hi·ªán conversion v·ªõi retry logic
            async def perform_conversion():
                print(f"üìù Calling conversion function for {file_extension}...")
                return conversion_function(
                    filepath=temp_file_path,
                    extract_images=extract_images,
                    extract_tables=extract_tables,
                    output_type=output_type
                )

            result = await retry_llm_call(perform_conversion)
            print(f"‚úÖ Conversion completed successfully!")

            # Chu·∫©n b·ªã response
            pages_data = []
            for page in result.pages:
                pages_data.append({
                    "page_number": page.page_number,
                    "content": page.page_content,
                    "content_length": len(page.page_content)
                })

            return ConversionResponse(
                success=True,
                message=f"Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng {file.filename}",
                pages=pages_data,
                total_pages=len(pages_data),
                file_type=file_extension
            )

        finally:
            # X√≥a file t·∫°m th·ªùi
            os.unlink(temp_file_path)

    except HTTPException:
        # Re-raise HTTP exceptions (like rate limit)
        raise
    except Exception as e:
        error_msg = str(e)

        # Handle specific errors
        if "tesseract" in error_msg.lower():
            raise HTTPException(
                status_code=500,
                detail="OCR service kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng c√†i ƒë·∫∑t Tesseract OCR ho·∫∑c th·ª≠ v·ªõi file kh√°c."
            )
        elif "429" in error_msg or "rate_limited" in error_msg.lower():
            raise HTTPException(
                status_code=429,
                detail="API rate limit exceeded. Vui l√≤ng th·ª≠ l·∫°i sau."
            )
        else:
            raise HTTPException(
                status_code=500,
                detail=f"L·ªói khi chuy·ªÉn ƒë·ªïi: {error_msg}"
            )


@app.post("/convert-url", response_model=ConversionResponse)
async def convert_url(
    url: str = Form(...),
    extract_images: bool = Form(True),
    extract_tables: bool = Form(True),
    output_type: str = Form("markdown")
):
    """
    Chuy·ªÉn ƒë·ªïi URL sang Markdown
    """
    try:
        # Kh·ªüi t·∫°o DocToMarkdown
        app_converter = DocToMarkdown(
            llm_client=llm_client,
            llm_model=llm_model if llm_client else None
        )

        # Th·ª±c hi·ªán conversion v·ªõi retry logic
        async def perform_url_conversion():
            return app_converter.convert_url_to_markdown(
                urlpath=url,
                extract_images=extract_images,
                extract_tables=extract_tables,
                output_type=output_type
            )

        result = await retry_llm_call(perform_url_conversion)

        # Chu·∫©n b·ªã response
        pages_data = []
        for page in result.pages:
            pages_data.append({
                "page_number": page.page_number,
                "content": page.page_content,
                "content_length": len(page.page_content)
            })

        return ConversionResponse(
            success=True,
            message=f"Chuy·ªÉn ƒë·ªïi URL th√†nh c√¥ng: {url}",
            pages=pages_data,
            total_pages=len(pages_data),
            file_type="url"
        )

    except HTTPException:
        # Re-raise HTTP exceptions (like rate limit)
        raise
    except Exception as e:
        error_msg = str(e)

        # Handle specific errors
        if "429" in error_msg or "rate_limited" in error_msg.lower():
            raise HTTPException(
                status_code=429,
                detail="API rate limit exceeded. Vui l√≤ng th·ª≠ l·∫°i sau."
            )
        else:
            raise HTTPException(
                status_code=500,
                detail=f"L·ªói khi chuy·ªÉn ƒë·ªïi URL: {error_msg}"
            )


@app.get("/supported-formats")
async def get_supported_formats():
    """L·∫•y danh s√°ch c√°c ƒë·ªãnh d·∫°ng file ƒë∆∞·ª£c h·ªó tr·ª£"""
    return {
        "supported_formats": {
            "pdf": "PDF documents",
            "docx": "Microsoft Word documents",
            "pptx": "Microsoft PowerPoint presentations",
            "csv": "Comma-separated values files",
            "png": "PNG images",
            "jpg": "JPEG images",
            "jpeg": "JPEG images"
        },
        "url_support": True,
        "llm_available": llm_client is not None,
        "llm_provider": "mistral",
        "llm_model": llm_model if llm_client else None
    }


@app.post("/convert-fast", response_model=ConversionResponse)
async def convert_document_fast(
    file: UploadFile = File(...),
    extract_images: bool = Form(False),
    extract_tables: bool = Form(False),
    output_type: str = Form("markdown")
):
    """
    Chuy·ªÉn ƒë·ªïi t√†i li·ªáu sang Markdown (kh√¥ng s·ª≠ d·ª•ng LLM - nhanh h∆°n)
    Ch·ªâ h·ªó tr·ª£: CSV, v√† c√°c file ƒë∆°n gi·∫£n
    """
    print(f"‚ö° FAST MODE: Received file: {file.filename} ({file.size} bytes)")

    try:
        # Ki·ªÉm tra file type
        file_extension = file.filename.split(
            '.')[-1].lower() if file.filename else ""
        fast_supported_types = ['csv', 'txt']  # Ch·ªâ h·ªó tr·ª£ file ƒë∆°n gi·∫£n

        if file_extension not in fast_supported_types:
            raise HTTPException(
                status_code=400,
                detail=f"Fast mode ch·ªâ h·ªó tr·ª£: {', '.join(fast_supported_types)}. S·ª≠ d·ª•ng /convert cho file ph·ª©c t·∫°p."
            )

        # T·∫°o file t·∫°m th·ªùi
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{file_extension}") as temp_file:
            content = await file.read()
            temp_file.write(content)
            temp_file_path = temp_file.name

        try:
            print(f"‚ö° FAST MODE: Converting {file_extension} without LLM...")

            # Kh·ªüi t·∫°o DocToMarkdown KH√îNG c√≥ LLM
            app_converter = DocToMarkdown(
                llm_client=None,  # Kh√¥ng s·ª≠ d·ª•ng LLM
                llm_model=None
            )

            # Ch·ªâ h·ªó tr·ª£ CSV cho fast mode
            if file_extension == 'csv':
                result = app_converter.convert_csv_to_markdown(
                    filepath=temp_file_path,
                    extract_images=False,  # Kh√¥ng extract images trong fast mode
                    extract_tables=False,  # Kh√¥ng extract tables trong fast mode
                    output_type=output_type
                )
            else:
                raise HTTPException(
                    status_code=400,
                    detail=f"Fast mode kh√¥ng h·ªó tr·ª£ file {file_extension}"
                )

            print(f"‚ö° FAST MODE: Conversion completed!")

            # Chu·∫©n b·ªã response
            pages_data = []
            for page in result.pages:
                pages_data.append({
                    "page_number": page.page_number,
                    "content": page.page_content,
                    "content_length": len(page.page_content)
                })

            return ConversionResponse(
                success=True,
                message=f"Chuy·ªÉn ƒë·ªïi nhanh th√†nh c√¥ng {file.filename}",
                pages=pages_data,
                total_pages=len(pages_data),
                file_type=file_extension
            )

        finally:
            # X√≥a file t·∫°m th·ªùi
            os.unlink(temp_file_path)

    except HTTPException:
        raise
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå Fast conversion error: {error_msg}")
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi chuy·ªÉn ƒë·ªïi nhanh: {error_msg}"
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        reload=os.getenv("DEBUG", "True").lower() == "true"
    )
